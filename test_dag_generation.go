package main

import (
	"fmt"
	"log"
	"os"

	"github.com/user/ai-data-engineer/backend/internal/config"
	"github.com/user/ai-data-engineer/backend/internal/domain"
	"github.com/user/ai-data-engineer/backend/internal/usecase"
)

func main() {
	log.Println("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DAG ===")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DAG
	dagSvc := usecase.NewDAGGeneratorService(cfg)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
	testPipelineReq := domain.CreatePipelineRequest{
		SourceType: "csv",
		Source: map[string]interface{}{
			"pathOrUrl": "/data/test.csv",
			"delimiter": ",",
			"hasHeader": true,
			"encoding":  "utf-8",
		},
		Target: func(s string) *string { return &s }("postgresql"),
		DDL: map[string]interface{}{
			"postgresql": `
				CREATE TABLE IF NOT EXISTS test_imported_data (
					id SERIAL PRIMARY KEY,
					name VARCHAR(255),
					value NUMERIC(10,2),
					created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
				);
			`,
		},
		Schedule: domain.ScheduleConfig{
			Cron:            "@daily",
			IncrementalMode: "full_refresh",
		},
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–∞–π–ø–ª–∞–π–Ω–∞
	pipelineID := "test-dag-integration-" + fmt.Sprintf("%d", os.Getpid())

	log.Printf("–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å ID: %s", pipelineID)
	log.Printf("–ò—Å—Ç–æ—á–Ω–∏–∫: %s", testPipelineReq.SourceType)
	log.Printf("–¶–µ–ª—å: %s", *testPipelineReq.Target)
	log.Printf("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: %s", testPipelineReq.Schedule.Cron)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DAG —Ñ–∞–π–ª
	log.Println("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DAG —Ñ–∞–π–ª–∞...")
	if err := dagSvc.GenerateDAG(testPipelineReq, pipelineID); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DAG: %v", err)
	}

	log.Println("=== DAG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω successfully! ===")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
	dagFilePath := fmt.Sprintf("ops/airflow/dags/pipe_%s_v1.py", pipelineID)
	if _, err := os.Stat(dagFilePath); err == nil {
		log.Printf("‚úÖ DAG —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: %s", dagFilePath)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫)
		content, err := os.ReadFile(dagFilePath)
		if err == nil {
			log.Println("üìÑ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DAG:")
			lines := fmt.Sprintf("%s", content)[:min(500, len(content))]
			fmt.Println(lines)
		}
	} else {
		log.Printf("‚ùå DAG —Ñ–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω: %s", dagFilePath)
		log.Printf("–û—à–∏–±–∫–∞: %v", err)
	}
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
